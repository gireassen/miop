import networkx as nx
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
import pandas as pd

G = nx.karate_club_graph()
data = nx.to_numpy_array(G)

te = TransactionEncoder()
data_encoded = te.fit_transform(data)
data_encoded_df = pd.DataFrame(data_encoded, columns=te.columns_)

#поиск частых наборов предметов
min_support = 0.02
frequent_itemsets = apriori(data_encoded_df, min_support=min_support, use_colnames=True)
#генерация ассоциативных правил
min_conf = 0.8
rules = association_rules(frequent_itemsets, min_threshold=min_conf)

fname = 'Karate'
n_rules = 300
rules[:n_rules].to_csv(fname+'.csv', index=False)

'''
Файл 'KarateRules.csv', который создается этим кодом, содержит ассоциативные правила, сгенерированные из данных. 
Эти правила представляют собой отношения между различными "Судентами" в данных.
Ассоциативные правила это сущности формата "Если A, то B", с определенной степенью уверенности. 
Например, правило может говорить: "Если в наблюдаемых данных есть предмет X, с 80% вероятностью будет наблюдаться также и предмет Y."
В файле 'KarateRules.csv', который генерируется этим кодом, каждая строка представляет собой одно ассоциативное правило. 
Каждое правило характеризуется следующими значенийми:
- `antecedents`: Предшествующий предмет (т.е., 'A' в "Если A, то B")
- `consequents`: Последующий предмет (т.е., 'B' в "Если A, то B")
- `antecedent support`: Поддержка антецедента. Это частота, с которой предмет 'A' встречается в данных.
- `consequent support`: Поддержка консеквента. Это частота, с которой предмет 'B' встречается в данных.
- `support`: Поддержка правила. Это частота, с которой встречаются оба предмета 'A' и 'B' вместе в данных.
- `confidence`: Уверенность в правиле. Это вероятность встретить 'B', если известно, что 'A' присутствует.
- `lift`: Лифт указывает насколько чаще чем случайно, 'B' встречается в транзакциях, где есть 'A'.
- `leverage`: Также мера, отражающая объем отклонения от случайности.
- `conviction`: Мера независимости. 
'''

'''
Данный код выполняет следующие действия:
Импортирует необходимые библиотеки. Библиотека networkx используется для работы с графами. 
mlxtend.preprocessing и mlxtend.frequent_patterns нужны для проведения анализа ассоциативных правил и частых наборов предметов. 
Библиотека pandas нужна для работы с данными в формате датафрейма.
Создает граф, представляющий клуб карате (стандартный пример в networkx), и преобразует его в массив numpy.
С помощью TransactionEncoder из модуля mlxtend.preprocessing кодирует данные. 
Эта структура преобразует данные так, чтобы каждый предмет был признаком. 
Если предмет присутствует в транзакции, ему присваивается значение True, если отсутствует - False.
Преобразует закодированные данные в датафрейм.
Используя функцию apriori из mlxtend.frequent_patterns, находит частые наборы предметов, 
т.е. группы предметов, которые часто встречаются вместе в данных.
Затем с помощью функции association_rules генерирует ассоциативные правила на основе полученных частых наборов предметов. 
Ассоциативные правила - это правила, которые позволяют выявлять взаимосвязи между различными предметами в наборе данных.
Последним шагом он сохраняет первые 300 ассоциативных правил в CSV-файл.
Под ассоциативными правилами следует понимать закономерности вида "Если предметы A, B и C часто встречаются вместе, 
то предмет D также, скорее всего, будет присутствовать".
'''